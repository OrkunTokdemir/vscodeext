{{- template "addLicense" . }}

{{- if .UseQSharedData }}
#include <utility>
{{- end }}

{{ .NamespaceOpenings }}

{{- if .UseQSharedData }}
class {{ .ClassName }}Data : public QSharedData
{
public:

};
{{- end }}

{{ define "ConstructorArgs" }}
{{- if .ConstructorParentClass }}{{ .ConstructorParentClass }} *parent{{ end -}}
{{ end }}

{{ define "ConstructorInit" }}
{{- if or .BaseClass .UseQSharedData }}
    : {{ if .BaseClass }}{{ .BaseClass }}{parent}{{ end -}}
    {{- if and .BaseClass .UseQSharedData }}, {{ end -}}
    {{- if .UseQSharedData }}data(new {{ .ClassName }}Data){{ end -}}
{{ end }}
{{ end }}

{{ .ClassName }}::{{ .ClassName }}({{- template "ConstructorArgs" . }})
    {{- template "ConstructorInit" . }}
{

}

{{- if .UseQSharedData }}
{{ .ClassName }}::{{ .ClassName }}(const {{ .ClassName }} &rhs)
    : data{rhs.data}
{

}

{{ .ClassName }}::{{ .ClassName }}({{ .ClassName }} &&rhs)
    : data{std::move(rhs.data)}
{

}

{{ .ClassName }} &{{ .ClassName }}::operator=(const {{ .ClassName }} &rhs)
{
    if (this != &rhs)
        data = rhs.data;
    return *this;
}

{{ .ClassName }} &{{ .ClassName }}::operator=({{ .ClassName }} &&rhs)
{
    if (this != &rhs)
        data = std::move(rhs.data);
    return *this;
}

{{ .ClassName }}::~{{ .ClassName }}()
{

}
{{- end }}

{{ .NamespaceClosings }}
