{{- template "addLicense" . }}
{{ if .UsePragmaOnce }}
#pragma once
{{ else }}
#ifndef {{ .HeaderGuard }}
#define {{ .HeaderGuard }}
{{ end }}

{{ .NamespaceOpenings }}
{{ range (.Includes | qUnpack )}}
#include <{{ . }}>
{{- end }}

{{- if .UseQSharedData }}
class {{ .ClassName }}Data;
{{- end }}

{{ if .BaseClass }}
class {{ .ClassName }} : public {{ .BaseClass }}
{{- else }}
class {{ .ClassName }}
{{- end }}
{
{{- range (.QtMacros | qUnpack) }}
    {{ . }}
{{- end }}

public:
{{- if .ConstructorParentClass }}
    explicit {{ .ClassName }}({{ .ConstructorParentClass }} *parent = nullptr);
{{- else }}
    {{ .ClassName }}();
{{- end }}

{{- if .UseQSharedData }}
    {{ .ClassName }}(const {{ .ClassName }} &);
    {{ .ClassName }}({{ .ClassName }} &&);
    {{ .ClassName }} &operator=(const {{ .ClassName }} &);
    {{ .ClassName }} &operator=({{ .ClassName }} &&);
    ~{{ .ClassName }}();
{{- end }}

{{- if .IsQObject }}
{{- if .UseQtKeyword }}
signals:
{{- else }}
Q_SIGNALS:
{{- end }}
{{- end }}

{{- if .UseQSharedData }}
private:
    QSharedDataPointer<{{ .ClassName }}Data> data;
{{- end }}
};

{{ .NamespaceClosings }}

{{- if not .UsePragmaOnce }}
#endif // {{ .HeaderGuard }}
{{- end }}
